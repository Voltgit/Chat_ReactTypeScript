{"version":3,"sources":["hooks/reduxHooks.ts","app/appSlice.ts","features/chat/ChatSlice.ts","features/chatInput/chatInputSlice.ts","features/chatInput/ChatInput.tsx","features/chatItem/ChatItem.tsx","utils/localeDate.ts","features/chat/Chat.tsx","pages/ChatPage.tsx","features/loginForm/loginFormSlice.ts","features/loginForm/LoginForm.tsx","pages/LoginPage.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","appSlice","createSlice","name","initialState","user","reducers","loginUser","state","action","payload","logoutUser","actions","chatSlice","messages","addMessage","reducer","push","prepare","message","nanoid","applyInput","inputValue","dispatch","getState","newMessage","date","Date","now","owner","text","chatInputSlice","value","changeInputValue","clearInput","ChatInput","props","app","chatInput","className","onChange","e","target","onKeyDown","key","placeholder","onClick","ChatItemVariants","ChatItem","variant","timestamp","getDate","getMonth","getFullYear","getHours","getMinutes","toLocaleDate","time","guest","style","width","Chat","chat","map","ChatPage","to","loginFormSlice","changeLoginFormValue","clearLoginFormValue","LoginForm","loginForm","onLoginClick","isAdmin","LoginPage","App","path","element","store","configureStore","devTools","appReducer","chatReducer","chatInputReducer","loginFormReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce8324fc.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../app/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IUser } from \"../types/IUser\";\r\n\r\ninterface appState {\r\n\tuser: IUser | null\r\n}\r\n\r\nconst initialState: appState = {\r\n\tuser: null\r\n}\r\n\r\nexport const appSlice = createSlice({\r\n\tname: 'app',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tloginUser: (state, action: PayloadAction<IUser>) => {\r\n\t\t\tstate.user = action.payload\r\n\t\t},\r\n\t\tlogoutUser: (state) => {\r\n\t\t\tstate.user = null\r\n\t\t}\r\n\t}\r\n})\r\n\r\n\r\nexport default appSlice.reducer\r\nexport const { loginUser, logoutUser } = appSlice.actions","import { createSlice, nanoid, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IMessage } from \"../../types/IMessage\";\r\n\r\ninterface chatState {\r\n\tmessages: IMessage[]\r\n}\r\n\r\nconst initialState: chatState = {\r\n\tmessages: []\r\n}\r\n\r\nexport const chatSlice = createSlice({\r\n\tname: 'chat',\r\n\tinitialState,\r\n\treducers: {\r\n\t\taddMessage: {\r\n\t\t\treducer: (state, action: PayloadAction<IMessage>) => {\r\n\t\t\t\tstate.messages.push(action.payload)\r\n\t\t\t},\r\n\t\t\tprepare: (message: IMessage) => {\r\n\t\t\t\tmessage.nanoid = nanoid()\r\n\t\t\t\treturn { payload: message }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport default chatSlice.reducer\r\nexport const { addMessage } = chatSlice.actions;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppDispatch, RootState } from \"../../app/store\";\r\nimport { IMessage } from \"../../types/IMessage\";\r\nimport { IUser } from \"../../types/IUser\";\r\nimport { addMessage } from \"../chat/ChatSlice\";\r\n\r\ninterface chatInputState {\r\n\tvalue: string;\r\n}\r\n\r\nconst initialState: chatInputState = {\r\n\tvalue: ''\r\n}\r\n\r\nexport function applyInput(user: IUser, inputValue: string) {\r\n\treturn function (dispatch: AppDispatch, getState: () => RootState) {\r\n\t\tif (!inputValue) return;\r\n\t\tconst newMessage: IMessage = {\r\n\t\t\tdate: Date.now(),\r\n\t\t\towner: user,\r\n\t\t\ttext: inputValue\r\n\t\t}\r\n\t\tdispatch(addMessage(newMessage))\r\n\t}\r\n}\r\n\r\nexport const chatInputSlice = createSlice({\r\n\tname: 'chatInput',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tchangeInputValue: (state, action: PayloadAction<string>) => {\r\n\t\t\tstate.value = action.payload\r\n\t\t},\r\n\t\tclearInput: (state) => {\r\n\t\t\tstate.value = ''\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const { changeInputValue, clearInput } = chatInputSlice.actions;\r\nexport default chatInputSlice.reducer;","import React, { FC } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\r\nimport \"./ChatInput.scss\";\r\nimport { applyInput, changeInputValue, clearInput } from \"./chatInputSlice\";\r\n\r\nconst ChatInput: FC = (props) => {\r\n\r\n\tconst dispatch = useAppDispatch()\r\n\tconst user = useAppSelector(state => state.app.user)\r\n\tconst value = useAppSelector(state => state.chatInput.value)\r\n\r\n\tfunction onEnterClick() {\r\n\t\tdispatch(applyInput(user!, value))\r\n\t\tdispatch(clearInput())\r\n\t}\r\n\r\n\tfunction onInputKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tdispatch(applyInput(user!, value))\r\n\t\t\tdispatch(clearInput())\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onInputChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n\t\tdispatch(changeInputValue(e.target.value))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='chat-input'>\r\n\t\t\t<input\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t\tonKeyDown={onInputKeyDown}\r\n\t\t\t\tplaceholder='Enter the message'\r\n\t\t\t/>\r\n\t\t\t<button\r\n\t\t\t\tonClick={onEnterClick}\r\n\t\t\t>\r\n\t\t\t\t{\"\\u27A4\"}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default ChatInput;\r\n","import React, { FC } from \"react\"\r\nimport { IMessage } from \"../../types/IMessage\";\r\nimport { IUser } from \"../../types/IUser\";\r\nimport { toLocaleDate } from \"../../utils/localeDate\";\r\nimport \"./ChatItem.scss\"\r\n\r\nexport enum ChatItemVariants {\r\n\towner = 'owner',\r\n\tguest = 'guest'\r\n}\r\n\r\ninterface ChatItemProps {\r\n\tuser: IUser;\r\n\tmessage: IMessage;\r\n\tvariant?: ChatItemVariants\r\n}\r\n\r\nconst ChatItem: FC<ChatItemProps> = ({ user, message, variant }) => {\r\n\r\n\tconst [date, time] = toLocaleDate(message.date)\r\n\tvariant = user.name === message.owner.name ? ChatItemVariants.owner : ChatItemVariants.guest;\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={\r\n\t\t\t\t`chat-item ${variant === ChatItemVariants.guest ? 'chat-item_guest' : ''}`\r\n\t\t\t}\r\n\t\t>\r\n\r\n\t\t\t<div className='chat-item__top'>\r\n\r\n\t\t\t\t<div className='chat-item__username'>\r\n\t\t\t\t\t{`${message.owner.name}`}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div style={{ width: '3rem' }} />\r\n\r\n\t\t\t\t<div className='chat-item__date'>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t{date}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t{time}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className='chat-item__bottom'>\r\n\r\n\t\t\t\t<div className='chat-item__message'>\r\n\t\t\t\t\t{message.text}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default ChatItem;\r\n","export function toLocaleDate(timestamp: number) {\r\n\tconst date = new Date(timestamp)\r\n\tconst localeDate = `${date.getDate()}.${date.getMonth()}.${date.getFullYear()}`\r\n\tconst localeTime = `${date.getHours()}:${date.getMinutes()}`\r\n\treturn [localeDate, localeTime]\r\n}","import React, { FC } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { logoutUser } from \"../../app/appSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\r\nimport { IMessage } from \"../../types/IMessage\";\r\nimport { IUser } from \"../../types/IUser\";\r\nimport ChatInput from \"../chatInput/ChatInput\";\r\nimport ChatItem, { ChatItemVariants } from \"../chatItem/ChatItem\";\r\nimport \"./Chat.scss\"\r\n\r\ninterface ChatProps {\r\n\tuser: IUser\r\n}\r\n\r\nconst Chat: FC<ChatProps> = ({ user }) => {\r\n\tconst dispatch = useAppDispatch()\r\n\tconst messages = useAppSelector(state => state.chat.messages)\r\n\r\n\tconst testMessage: IMessage = {\r\n\t\tdate: Date.now(),\r\n\t\towner: user,\r\n\t\ttext: 'Test message. Had been sent by User'\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={`chat`}>\r\n\t\t\t<div className='chat__header'>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>Username:</span>\r\n\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t<span className='chat__username'>{user.name}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='chat__logout'>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={() => dispatch(logoutUser())}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLog out\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='chat__messages'>\r\n\t\t\t\t{/* <ChatItem user={user} message={testMessage} />\r\n\t\t\t\t<ChatItem user={user} message={testMessage} variant={ChatItemVariants.guest} /> */}\r\n\t\t\t\t{\r\n\t\t\t\t\tmessages.map((message) => {\r\n\t\t\t\t\t\treturn <ChatItem user={user} message={message} key={message.nanoid} />\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<ChatInput />\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Chat;\r\n","import React, { FC } from \"react\";\r\nimport { Navigate } from \"react-router\";\r\nimport Chat from \"../features/chat/Chat\";\r\nimport { IUser } from \"../types/IUser\";\r\n\r\ninterface ChatPageProps {\r\n\tuser: IUser\r\n}\r\n\r\n\r\nconst ChatPage: FC<ChatPageProps> = ({ user }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\t!user ?\r\n\t\t\t\t\t<Navigate to='/login' /> :\r\n\t\t\t\t\t<Chat user={user} />\r\n\t\t\t}\r\n\t\t</>\r\n\r\n\t)\r\n};\r\n\r\nexport default ChatPage;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { loginUser } from \"../../app/appSlice\";\r\nimport { AppDispatch, RootState } from \"../../app/store\";\r\nimport { IUser } from \"../../types/IUser\";\r\n\r\ninterface loginFormState {\r\n\tvalue: string;\r\n}\r\n\r\nconst initialState: loginFormState = {\r\n\tvalue: ''\r\n}\r\n\r\nexport const loginFormSlice = createSlice({\r\n\tname: 'userForm',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tchangeLoginFormValue: (state, action: PayloadAction<string>) => {\r\n\t\t\tstate.value = action.payload\r\n\t\t},\r\n\t\tclearLoginFormValue: (state) => {\r\n\t\t\tstate.value = ''\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport function applyLoginFormInput(name: string) {\r\n\treturn function (dispatch: AppDispatch, getState: () => RootState) {\r\n\t\tif (!name) return;\r\n\t\tconst user: IUser = {\r\n\t\t\tname,\r\n\t\t\tisAdmin: false\r\n\t\t}\r\n\t\tdispatch(loginUser(user))\r\n\t}\r\n}\r\n\r\nexport default loginFormSlice.reducer;\r\nexport const { changeLoginFormValue, clearLoginFormValue } = loginFormSlice.actions;","import React, { FC } from \"react\"\r\nimport { Navigate } from \"react-router\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/reduxHooks\";\r\nimport \"./LoginForm.scss\"\r\nimport { applyLoginFormInput, changeLoginFormValue, clearLoginFormValue } from \"./loginFormSlice\";\r\n\r\nconst LoginForm: FC = () => {\r\n\tconst dispatch = useAppDispatch()\r\n\tconst value = useAppSelector(state => state.loginForm.value)\r\n\tconst user = useAppSelector(state => state.app.user)\r\n\r\n\tfunction onLoginClick() {\r\n\t\tdispatch(applyLoginFormInput(value))\r\n\t\tdispatch(clearLoginFormValue())\r\n\t}\r\n\tfunction onInputChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n\t\tdispatch(changeLoginFormValue(e.target.value))\r\n\t}\r\n\tfunction onInputKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tonLoginClick()\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\tuser ?\r\n\t\t\t\t\t<Navigate to='/chat' />\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<div className='login-form'>\r\n\t\t\t\t\t\t<span className='login-form__title'>Login page</span>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\tonChange={onInputChange}\r\n\t\t\t\t\t\t\tonKeyDown={onInputKeyDown}\r\n\t\t\t\t\t\t\tplaceholder='Enter username'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={onLoginClick}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tLog in\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</>\r\n\r\n\r\n\t)\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { FC } from \"react\"\r\nimport LoginForm from \"../features/loginForm/LoginForm\";\r\n\r\nconst LoginPage: FC = (props) => {\r\n\treturn (\r\n\t\t<LoginForm />\r\n\t)\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\nimport { HashRouter as Router, Navigate, Route, Routes } from 'react-router-dom';\nimport { useAppSelector } from '../hooks/reduxHooks';\nimport ChatPage from '../pages/ChatPage';\nimport LoginPage from '../pages/LoginPage';\nimport './App.scss';\n\nfunction App() {\n\tconst user = useAppSelector(state => state.app.user)\n\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t<Routes>\n\t\t\t\t\t\t<Route path='/chat' element={<ChatPage user={user!} />} />\n\t\t\t\t\t\t<Route path='/login' element={<LoginPage />} />\n\t\t\t\t\t\t<Route path='*' element={<Navigate to='/login' />} />\n\t\t\t\t\t</Routes>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport chatReducer from \"../features/chat/ChatSlice\";\r\nimport chatInputReducer from \"../features/chatInput/chatInputSlice\";\r\nimport loginFormReducer from \"../features/loginForm/loginFormSlice\";\r\nimport appReducer from \"./appSlice\";\r\n\r\n\r\nexport const store = configureStore({\r\n\tdevTools: true,\r\n\treducer: {\r\n\t\tapp: appReducer,\r\n\t\tchat: chatReducer,\r\n\t\tchatInput: chatInputReducer,\r\n\t\tloginForm: loginFormReducer\r\n\t}\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './app/App';\nimport { store } from './app/store';\nimport './index.scss';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}